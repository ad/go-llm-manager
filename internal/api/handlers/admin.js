let currentJWT = null;
let resultJWT = null;
let pollingInterval = null;
let sseConnection = null;
let magicSSEConnection = null;
let metricsInterval = null;
let sseReconnectCount = 0;
let magicSSEReconnectCount = 0;
let sseReconnectTimeout = null;
let magicSSEReconnectTimeout = null;
let processorSSEConnection = null;
let ssePollingConnection = null;
let ssePollingTaskId = null;
let ssePollingTaskCompleted = false;
let tasksAutoRefreshInterval = null;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π URL
window.addEventListener('load', function() {
    const baseUrl = window.location.origin;
    document.getElementById('baseUrl').value = baseUrl;
    log('üöÄ LLM Proxy Admin Dashboard –∑–∞–≥—Ä—É–∂–µ–Ω');
    log('üí° –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
});

// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', function() {
    if (pollingInterval) {
        clearInterval(pollingInterval);
    }
    if (sseConnection) {
        sseConnection.close();
    }
    if (magicSSEConnection) {
        magicSSEConnection.close();
    }
    if (metricsInterval) {
        clearInterval(metricsInterval);
    }
});

function log(message, type = 'info') {
    const logs = document.getElementById('logs');
    const timestamp = new Date().toLocaleTimeString();
    const logEntry = document.createElement('div');
    
    let color = '#e2e8f0';
    if (type === 'error') color = '#fed7d7';
    if (type === 'success') color = '#9ae6b4';
    if (type === 'warning') color = '#faf089';
    
    logEntry.innerHTML = `<span style="color: #a0aec0;">[${timestamp}]</span> <span style="color: ${color};">${message}</span>`;
    logs.appendChild(logEntry);
    logs.scrollTop = logs.scrollHeight;
}

function clearLogs() {
    document.getElementById('logs').innerHTML = '';
    log('üìù –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã');
}

function switchTab(tabName) {
    // –°–∫—Ä—ã—Ç—å –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–æ–≤
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
    });
    // –£–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –≤—Å–µ—Ö —Ç–∞–±–æ–≤
    document.querySelectorAll('.tab').forEach(tab => {
        tab.classList.remove('active');
    });
    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–±
    document.getElementById(tabName + '-content').classList.add('active');
    event.target.classList.add('active');
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    if (tabName === 'admin') {
        setTimeout(() => {
            loadAndDisplayAllTasks();
            startTasksAutoRefresh();
        }, 100);
    } else {
        stopTasksAutoRefresh();
    }
    log(`üìÇ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É: ${tabName}`);
}

async function testConnection() {
    try {
        const baseUrl = document.getElementById('baseUrl').value;
        log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API...');
        
        const response = await fetch(`${baseUrl}/`);
        const data = await response.json();
        
        const statusEl = document.getElementById('connectionStatus');
        if (response.ok) {
            statusEl.innerHTML = `
                <div class="result success" style="display:block; margin-top: 10px;">
                    <strong>‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</strong><br>
                    –í–µ—Ä—Å–∏—è API: ${data.message}<br>
                    –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–π–Ω—Ç—ã: ${Object.keys(data.endpoints || {}).length}
                </div>
            `;
            log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —É—Å–ø–µ—à–Ω–æ', 'success');
        } else {
            throw new Error(`HTTP ${response.status}`);
        }
    } catch (error) {
        document.getElementById('connectionStatus').innerHTML = `
            <div class="result error" style="display:block; margin-top: 10px;">
                <strong>‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</strong><br>
                ${error.message}
            </div>
        `;
        log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`, 'error');
    }
}

async function runMagic() {
    const magicInput = document.getElementById('magicInput');
    const magicBtn = document.getElementById('magicBtn');
    const wrapper = document.querySelector('.magic-input-wrapper');
    
    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    magicInput.disabled = true;
    magicBtn.disabled = true;
    wrapper.classList.add('loading');
    
    function restoreMagicInterface(errorMessage = null) {
        magicInput.disabled = false;
        magicBtn.disabled = false;
        wrapper.classList.remove('loading');
        
        if (errorMessage) {
            magicInput.placeholder = errorMessage;
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π placeholder —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                magicInput.placeholder = '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è...';
            }, 3000);
        } else {
            magicInput.placeholder = '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è...';
        }
    }
    
    try {
        const productText = magicInput.value.trim();
        if (!productText) {
            restoreMagicInterface('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
            log('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è', 'warning');
            return;
        }
        
        log('‚ú® –ù–∞—á–∏–Ω–∞–µ–º –º–∞–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ...');
        
        const baseUrl = document.getElementById('baseUrl').value;
        const apiKey = document.getElementById('apiKey').value;
        const userId = 'magic_user_' + Date.now();
        
        // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –º–∞–≥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏
        const tokenResponse = await fetch(`${baseUrl}/api/internal/generate-token`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${apiKey}`
            },
            body: JSON.stringify({
                user_id: userId,
                product_data: productText,
            })
        });

        if (!tokenResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: HTTP ${tokenResponse.status}`);
        }

        const tokenData = await tokenResponse.json();
        if (!tokenData.success) {
            throw new Error(tokenData.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞');
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        const taskResponse = await fetch(`${baseUrl}/api/create`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + tokenData.token
            }
        });

        if (!taskResponse.ok) {
            throw new Error(`HTTP ${taskResponse.status}`);
        }

        const taskData = await taskResponse.json();
        if (!taskData.success) {
            throw new Error(taskData.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏');
        }

        const magicTaskId = taskData.taskId;
        const resultToken = taskData.token; // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞
        log(`üéØ –ú–∞–≥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: ${magicTaskId}`);

        // –ù–∞—á–∏–Ω–∞–µ–º SSE –ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        startMagicSSEPolling(resultToken, magicInput, wrapper, restoreMagicInterface);
        
    } catch (error) {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        restoreMagicInterface(`‚ùå ${error.message}`);
        log(`‚ùå –û—à–∏–±–∫–∞ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: ${error.message}`, 'error');
    }
}

async function createTask() {
    try {
        const baseUrl = document.getElementById('baseUrl').value;
        const apiKey = document.getElementById('apiKey').value;
        const userId = document.getElementById('userId').value;
        const productData = document.getElementById('productData').value;
        const priority = parseInt(document.getElementById('priority').value);
        const model = document.getElementById('ollamaModel').value;
        const temperature = parseFloat(document.getElementById('temperature').value);
        const maxTokens = parseInt(document.getElementById('maxTokens').value);
        const topP = parseFloat(document.getElementById('topP').value);
        const topK = parseInt(document.getElementById('topK').value);
        const repeatPenalty = parseFloat(document.getElementById('repeatPenalty').value);
        const seedInput = document.getElementById('seed').value;
        const stopSequencesInput = document.getElementById('stopSequences').value;
        const promptOverride = document.getElementById('promptOverride').value;

        log('ÔøΩ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∑–∞–¥–∞—á–∏...');

        // Build ollama_params object
        const ollamaParams = {
            model: model,
            temperature: temperature,
            max_tokens: maxTokens,
            top_p: topP,
            top_k: topK,
            repeat_penalty: repeatPenalty
        };

        // Add optional parameters if provided
        if (seedInput) {
            ollamaParams.seed = parseInt(seedInput);
        }
        if (stopSequencesInput) {
            ollamaParams.stop = stopSequencesInput.split(',').map(s => s.trim()).filter(s => s);
        }
        if (promptOverride) {
            ollamaParams.prompt = promptOverride;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
        const tokenResponse = await fetch(`${baseUrl}/api/internal/generate-token`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${apiKey}`
            },
            body: JSON.stringify({
                user_id: userId,
                product_data: productData,
                priority: priority,
                ollama_params: ollamaParams
            })
        });

        if (!tokenResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: HTTP ${tokenResponse.status}`);
        }

        const tokenData = await tokenResponse.json();
        
        if (!tokenData.success) {
            throw new Error(tokenData.error || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞');
        }

        currentJWT = tokenData.token;
        document.getElementById('jwtToken').value = currentJWT;
        document.getElementById('tokenResult').style.display = 'block';
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
        const expiryTime = new Date(Date.now() + tokenData.expires_in * 1000);
        document.getElementById('tokenExpiry').textContent = expiryTime.toLocaleString();
        
        log('‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω, —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...');

        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
        const response = await fetch(`${baseUrl}/api/create`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + currentJWT
            }
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        
        if (data.success) {
            currentTaskId = data.taskId;
            resultJWT = data.token; // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞
            document.getElementById('taskId').textContent = currentTaskId;
            document.getElementById('estimatedTime').textContent = data.estimatedTime;
            document.getElementById('taskResult').style.display = 'block';
            
            log('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞', 'success');
            log(`üìä –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${data.estimatedTime}`);
            log('‚úÖ –¢–æ–∫–µ–Ω –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω');
            
            // –¢–µ–ø–µ—Ä—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            document.getElementById('resultBtn').disabled = false;
            document.getElementById('pollBtn').disabled = false;
            document.getElementById('realtimePollBtn').disabled = false;
            document.getElementById('createBtn').disabled = false;
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º real-time –æ–ø—Ä–æ—Å
            log('‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ real-time –æ–ø—Ä–æ—Å–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
            startRealtimePolling();
            
        } else {
            throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
    } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ${error.message}`, 'error');
    }
}

async function getResult() {
    try {
        const baseUrl = document.getElementById('baseUrl').value;
        
        if (!resultJWT) {
            throw new Error('–¢–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á—É —Å–Ω–∞—á–∞–ª–∞.');
        }
        
        log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
        
        const response = await fetch(`${baseUrl}/api/result`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${resultJWT}`
            }
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        
        if (data.success) {
            document.getElementById('status').textContent = data.status;
            document.getElementById('status').className = `task-status status-${data.status}`;
            document.getElementById('finalResult').style.display = 'block';
            
            if (data.createdAt) {
                document.getElementById('createdAt').textContent = new Date(data.createdAt).toLocaleString();
            }
            
            if (data.status === 'completed' && data.result) {
                document.getElementById('resultText').textContent = JSON.stringify({
                    status: data.status,
                    result: data.result,
                    createdAt: data.createdAt,
                    completedAt: new Date().toISOString()
                }, null, 2);
                log('üéâ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!', 'success');
                stopPolling();
            } else if (data.status === 'failed') {
                document.getElementById('resultText').textContent = JSON.stringify({
                    status: data.status,
                    error: '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏',
                    createdAt: data.createdAt
                }, null, 2);
                log('‚ùå –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π', 'error');
                stopPolling();
            } else {
                document.getElementById('resultText').textContent = JSON.stringify({
                    status: data.status,
                    createdAt: data.createdAt,
                    message: '–ó–∞–¥–∞—á–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...'
                }, null, 2);
                log(`‚è≥ –ó–∞–¥–∞—á–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ: ${data.status}`);
            }
        } else {
            throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
    } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${error.message}`, 'error');
    }
}

function startPolling() {
    document.getElementById('pollBtn').disabled = true;
    document.getElementById('stopBtn').disabled = false;
    log('üîÑ –ù–∞—á–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–æ—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥');
    
    pollingInterval = setInterval(getResult, 5000);
}

function stopPolling() {
    if (pollingInterval) {
        clearInterval(pollingInterval);
        pollingInterval = null;
        document.getElementById('pollBtn').disabled = false;
        document.getElementById('stopBtn').disabled = true;
        log('‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    if (sseConnection) {
        sseConnection.close();
        sseConnection = null;
        document.getElementById('realtimePollBtn').disabled = false;
        document.getElementById('stopBtn').disabled = true;
        log('‚èπÔ∏è Real-time –ø–æ–ª–ª–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    if (sseReconnectTimeout) {
        clearTimeout(sseReconnectTimeout);
        sseReconnectTimeout = null;
    }
    
    if (magicSSEConnection) {
        magicSSEConnection.close();
        magicSSEConnection = null;
        log('‚èπÔ∏è –ú–∞–≥–∏—á–µ—Å–∫–∏–π real-time –ø–æ–ª–ª–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    if (magicSSEReconnectTimeout) {
        clearTimeout(magicSSEReconnectTimeout);
        magicSSEReconnectTimeout = null;
    }
    
    // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤
    sseReconnectCount = 0;
    magicSSEReconnectCount = 0;
}

function startRealtimePolling() {
    try {
        if (!resultJWT) {
            log('‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á—É —Å–Ω–∞—á–∞–ª–∞.', 'error');
            return;
        }

        const realtimeBtn = document.getElementById('realtimePollBtn');
        const stopBtn = document.getElementById('stopBtn');
        
        if (!realtimeBtn) {
            log('‚ùå –ö–Ω–æ–ø–∫–∞ Real-time SSE –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DOM', 'error');
            return;
        }
        
        if (!stopBtn) {
            log('‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DOM', 'error');
            return;
        }

        realtimeBtn.disabled = true;
        stopBtn.disabled = false;
        log('‚ö° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ real-time –ø–æ–ª–ª–∏–Ω–≥—É...');

        const baseUrl = document.getElementById('baseUrl')?.value;
        if (!baseUrl) {
            log('‚ùå Base URL –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            realtimeBtn.disabled = false;
            stopBtn.disabled = true;
            return;
        }
        
        const sseUrl = baseUrl + '/api/result-polling?token=' + encodeURIComponent(resultJWT);
        let taskFinalized = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞

        function connectSSE() {
            // –ù–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            if (taskFinalized) {
                log('‚ÑπÔ∏è –ó–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
                return;
            }
            
            if (sseReconnectCount >= 5) {
                log('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (5)', 'error');
                realtimeBtn.disabled = false;
                stopBtn.disabled = true;
                return;
            }
            
            if (sseReconnectCount > 0) {
                log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è #' + (sseReconnectCount + 1));
            }
            
            sseConnection = new EventSource(sseUrl);

            sseConnection.onopen = function(event) {
                log('‚úÖ Real-time —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                sseReconnectCount = 0; // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            };

    sseConnection.onmessage = function(event) {
        try {
            log('üîµ –ü–æ–ª—É—á–µ–Ω–æ SSE —Å–æ–±—ã—Ç–∏–µ: ' + event.data);
            const data = JSON.parse(event.data);
            log('üîµ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω, —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: ' + data.type);
            log('üîµ –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: ' + JSON.stringify(data.data, null, 2));
            
            switch(data.type) {
                case 'heartbeat':
                    if (data.data.message) {
                        log('üíì ' + data.data.message);
                    } else {
                        log('üíì Heartbeat');
                    }
                    break;
                    
                case 'task_status':
                    log('üìä –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è: ' + data.data.status);
                    if (data.data.processingStartedAt) {
                        log('‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å: ' + new Date(data.data.processingStartedAt).toLocaleString());
                    }
                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                    displayTaskStatus(data.data);
                    break;
                    
                case 'task_completed':
                    log('üéâ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!');
                    log('üîµ –î–∞–Ω–Ω—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏: ' + JSON.stringify(data.data, null, 2));
                    displayTaskResult(data.data);
                    taskFinalized = true;
                    stopSSEPolling();
                    break;
                    
                case 'task_failed':
                    log('‚ùå –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: ' + (data.data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
                    log('üîµ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–ª–∏–≤—à–µ–π—Å—è –∑–∞–¥–∞—á–∏: ' + JSON.stringify(data.data, null, 2));
                    displayTaskResult(data.data);
                    taskFinalized = true;
                    stopSSEPolling();
                    break;
                    
                case 'error':
                    log('‚ùå –û—à–∏–±–∫–∞ SSE: ' + data.data.error, 'error');
                    if (data.data.shouldReconnect) {
                        const delay = data.data.reconnectDelay || 5000;
                        log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ' + (delay/1000) + ' —Å–µ–∫—É–Ω–¥...');
                        sseConnection.close();
                        sseReconnectCount++;
                        sseReconnectTimeout = setTimeout(connectSSE, delay);
                    } else {
                        sseConnection.close();
                        sseConnection = null;
                        realtimeBtn.disabled = false;
                        stopBtn.disabled = true;
                    }
                    break;
                    
                default:
                    log('üìù –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ SSE —Å–æ–±—ã—Ç–∏–µ: ' + data.type);
                    log('üîµ –î–∞–Ω–Ω—ã–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è: ' + JSON.stringify(data, null, 2));
            }
        } catch (error) {
            log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ SSE –¥–∞–Ω–Ω—ã—Ö: ' + error.message, 'error');
            log('üîµ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: ' + event.data);
        }
    };

    sseConnection.onerror = function(event) {
        // –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        if (taskFinalized) {
            log('‚ÑπÔ∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏');
            return;
        }
        
        log('‚ùå –û—à–∏–±–∫–∞ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...', 'error');
        if (sseConnection) {
            sseConnection.close();
            sseReconnectCount++;
            sseReconnectTimeout = setTimeout(connectSSE, 5000);
        }
    };
        }

        // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        sseReconnectCount = 0;
        connectSSE();
    } catch (error) {
        log('‚ùå –û—à–∏–±–∫–∞ –≤ Real-time –ø–æ–ª–ª–∏–Ω–≥–µ: ' + error.message, 'error');
        const realtimeBtn = document.getElementById('realtimePollBtn');
        const stopBtn = document.getElementById('stopBtn');
        if (realtimeBtn) realtimeBtn.disabled = false;
        if (stopBtn) stopBtn.disabled = true;
    }
}

function displayTaskStatus(taskData) {
    log('üîµ displayTaskStatus –≤—ã–∑–≤–∞–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: ' + JSON.stringify(taskData, null, 2));
    const resultDiv = document.getElementById('taskResult');
    resultDiv.style.display = 'block';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    const taskIdEl = document.getElementById('taskId');
    const taskStatusEl = document.getElementById('taskStatus');
    const taskCreatedAtEl = document.getElementById('taskCreatedAt');
    const taskCompletedAtEl = document.getElementById('taskCompletedAt');
    const taskResultTextEl = document.getElementById('taskResultText');
    
    if (taskIdEl) taskIdEl.textContent = taskData.taskId || '-';
    if (taskStatusEl) {
        taskStatusEl.textContent = taskData.status || '-';
        // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é —Å—Ç–∞—Ç—É—Å–∞
        taskStatusEl.className = 'task-status status-' + (taskData.status || 'unknown');
    }
    if (taskCreatedAtEl) {
        taskCreatedAtEl.textContent = taskData.createdAt ? 
            new Date(taskData.createdAt).toLocaleString() : 'N/A';
    }
    if (taskCompletedAtEl) {
        taskCompletedAtEl.textContent = taskData.completedAt ? 
            new Date(taskData.completedAt).toLocaleString() : 'N/A';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if (taskResultTextEl) {
        switch(taskData.status) {
            case 'pending':
                taskResultTextEl.textContent = '‚è≥ –ó–∞–¥–∞—á–∞ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏...';
                taskResultTextEl.style.color = '#f39c12';
                break;
            case 'processing':
                const startedText = taskData.processingStartedAt ? 
                    ' (–Ω–∞—á–∞–ª–∞—Å—å: ' + new Date(taskData.processingStartedAt).toLocaleTimeString() + ')' : '';
                taskResultTextEl.textContent = '‚öôÔ∏è –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...' + startedText;
                taskResultTextEl.style.color = '#3498db';
                break;
            default:
                taskResultTextEl.textContent = 'üìä –°—Ç–∞—Ç—É—Å: ' + (taskData.status || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
                taskResultTextEl.style.color = '#7f8c8d';
        }
    }
    
    log('‚úÖ displayTaskStatus: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ ' + taskData.status);
}

function displayTaskResult(taskData) {
    log('üîµ displayTaskResult –≤—ã–∑–≤–∞–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: ' + JSON.stringify(taskData, null, 2));
    const resultDiv = document.getElementById('taskResult');
    resultDiv.style.display = 'block';
    
    const taskIdEl = document.getElementById('taskId');
    const taskStatusEl = document.getElementById('taskStatus');
    const taskCreatedAtEl = document.getElementById('taskCreatedAt');
    const taskCompletedAtEl = document.getElementById('taskCompletedAt');
    const taskResultTextEl = document.getElementById('taskResultText');
    
    if (taskIdEl) taskIdEl.textContent = taskData.taskId || '-';
    if (taskStatusEl) {
        taskStatusEl.textContent = taskData.status || '-';
        taskStatusEl.className = 'task-status status-' + (taskData.status || 'unknown');
    }
    if (taskCreatedAtEl) {
        taskCreatedAtEl.textContent = taskData.createdAt ? 
            new Date(taskData.createdAt).toLocaleString() : 'N/A';
    }
    if (taskCompletedAtEl) {
        taskCompletedAtEl.textContent = taskData.completedAt ? 
            new Date(taskData.completedAt).toLocaleString() : 'N/A';
    }
    
    if (taskResultTextEl) {
        if (taskData.status === 'completed') {
            const result = (taskData.result !== undefined && taskData.result !== null) ? 
                taskData.result : '[–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞]';
            taskResultTextEl.textContent = result;
            taskResultTextEl.style.color = '#2ecc71';
            log('‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç completed –∑–∞–¥–∞—á–∏: ' + result.substring(0, 100) + '...');
        } else if (taskData.status === 'failed') {
            const error = (taskData.error !== undefined && taskData.error !== null) ? 
                taskData.error : '[–û—à–∏–±–∫–∞ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è]';
            taskResultTextEl.textContent = error;
            taskResultTextEl.style.color = '#e74c3c';
            log('‚ùå –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ failed –∑–∞–¥–∞—á–∏: ' + error);
        } else {
            taskResultTextEl.textContent = '[–°—Ç–∞—Ç—É—Å: ' + (taskData.status || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') + ']';
            taskResultTextEl.style.color = '#888';
            log('‚ÑπÔ∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ' + taskData.status);
        }
    } else {
        log('‚ùå –≠–ª–µ–º–µ–Ω—Ç taskResultText –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM!');
    }
    
    log('‚úÖ displayTaskResult: —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
}

// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// 
// –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç:
// ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è/–æ–∂–∏–¥–∞–Ω–∏—è:
//    - pending: –≤—Ä–µ–º—è –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
//    - processing: –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–∞–ª–∞
//    - completed/failed: –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
// ‚ùå –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫:
//    - –¥–ª—è failed –∑–∞–¥–∞—á –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è error_message
//    - –∫—Ä–∞—Å–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –¥–ª—è –æ—à–∏–±–æ–∫
// üé® –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏:
//    - –∑–µ–ª–µ–Ω—ã–π: completed –∑–∞–¥–∞—á–∏
//    - –∫—Ä–∞—Å–Ω—ã–π: failed –∑–∞–¥–∞—á–∏  
//    - —Å–∏–Ω–∏–π: processing –∑–∞–¥–∞—á–∏
//    - –∂–µ–ª—Ç—ã–π: pending –∑–∞–¥–∞—á–∏

async function loadAndDisplayAllTasks() {
    try {
        const baseUrl = document.getElementById('baseUrl').value;
        const apiKey = document.getElementById('apiKey').value;
        log('üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á...');
        const response = await fetch(`${baseUrl}/api/internal/all-tasks`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${apiKey}`
            }
        });
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        const data = await response.json();
        const allTasks = data.tasks || [];
        const pendingTasks = allTasks.filter(t => t.status === 'pending');
        displayPendingTasks(pendingTasks);
        displayAllTasks(allTasks);
        log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á: –≤—Å–µ–≥–æ ${allTasks.length}, –æ–∂–∏–¥–∞—é—â–∏—Ö ${pendingTasks.length}`, 'success');
    } catch (error) {
        displayPendingTasks([]);
        displayAllTasks([]);
        log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á: ${error.message}`, 'error');
    }
}

function startTasksAutoRefresh() {
    if (tasksAutoRefreshInterval) return;
    tasksAutoRefreshInterval = setInterval(loadAndDisplayAllTasks, 5000);
}

function stopTasksAutoRefresh() {
    if (tasksAutoRefreshInterval) {
        clearInterval(tasksAutoRefreshInterval);
        tasksAutoRefreshInterval = null;
    }
}

// –ó–∞–º–µ–Ω—è–µ–º refreshTaskList –Ω–∞ –µ–¥–∏–Ω—ã–π –≤—ã–∑–æ–≤
async function refreshTaskList() {
    log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –∑–∞–¥–∞—á...');
    await loadAndDisplayAllTasks();
}

async function runCleanup() {
    try {
        const baseUrl = document.getElementById('baseUrl').value;
        const apiKey = document.getElementById('apiKey').value;
        
        log('üßπ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –æ—á–∏—Å—Ç–∫–∏...');

        const response = await fetch(`${baseUrl}/api/internal/cleanup`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${apiKey}`
            }
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        
        document.getElementById('cleanupResults').innerHTML = `
            <h4>‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏</h4>
            <div class="json-viewer">${JSON.stringify(data, null, 2)}</div>
        `;
        document.getElementById('cleanupResults').style.display = 'block';
        
        log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 'success');
        
    } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error.message}`, 'error');
    }
}

async function getCleanupStats() {
    try {
        const baseUrl = document.getElementById('baseUrl').value;
        const apiKey = document.getElementById('apiKey').value;
        
        log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–∏—Å—Ç–∫–∏...');

        const response = await fetch(`${baseUrl}/api/internal/cleanup/stats`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${apiKey}`
            }
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        
        document.getElementById('cleanupResults').innerHTML = `
            <h4>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏</h4>
            <div class="json-viewer">${JSON.stringify(data, null, 2)}</div>
        `;
        document.getElementById('cleanupResults').style.display = 'block';
        
        log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∞', 'success');
        
    } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`, 'error');
    }
}

async function workSteal() {
    try {
        const baseUrl = document.getElementById('baseUrl').value;
        const apiKey = document.getElementById('apiKey').value;
        
        log('‚öñÔ∏è –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á...');

        const response = await fetch(`${baseUrl}/api/internal/work-steal`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${apiKey}`
            },
            body: JSON.stringify({
                processor_id: 'admin-dashboard',
                max_steal_count: 3,
                timeout_ms: 300000
            })
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        
        document.getElementById('workStealResults').innerHTML = `
            <h4>‚öñÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è</h4>
            <div class="json-viewer">${JSON.stringify(data, null, 2)}</div>
        `;
        document.getElementById('workStealResults').style.display = 'block';
        
        log('‚úÖ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', 'success');
        
    } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ${error.message}`, 'error');
    }
}

async function getProcessorMetrics() {
    try {
        const baseUrl = document.getElementById('baseUrl').value;
        const apiKey = document.getElementById('apiKey').value;
        
        log('üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤...');

        const response = await fetch(`${baseUrl}/api/internal/metrics`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${apiKey}`
            }
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        
        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Å–µ–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–æ–π
        let metricsHtml = '<h4>üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤</h4>';
        
        if (data.success && data.processors) {
            const processors = data.processors;
            const processorCount = processors.length;
            
            metricsHtml += `
                <div class="metrics-grid">
                    <div class="metric-card">
                        <strong>–í—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤</strong><br>
                        <span class="metric-value">${processorCount}</span>
                    </div>
            `;
            
            // –î–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—É
            processors.forEach(processor => {
                const lastUpdated = new Date(processor.last_updated);
                const isActive = (Date.now() - processor.last_updated) < 60000; // –∞–∫—Ç–∏–≤–µ–Ω –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–ª—Å—è –º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥
                const statusColor = isActive ? '#00b894' : '#6c757d';
                const statusText = isActive ? 'active' : 'inactive';
                
                metricsHtml += `
                    <div class="metric-card">
                        <strong>${processor.processor_id}</strong><br>
                        <span style="color: ${statusColor};">‚óè</span> ${statusText}<br>
                        <small>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: ${processor.active_tasks || 0}</small><br>
                        <small>–û—á–µ—Ä–µ–¥—å: ${processor.queue_size}</small><br>
                        <small>CPU: ${processor.cpu_usage}%</small><br>
                        <small>–ü–∞–º—è—Ç—å: ${processor.memory_usage}%</small><br>
                        <small>–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${lastUpdated.toLocaleTimeString()}</small>
                    </div>
                `;
            });
            
            metricsHtml += '</div>';
            
            // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            const totalTasks = processors.reduce((sum, p) => sum + (p.active_tasks || 0), 0);
            const totalQueue = processors.reduce((sum, p) => sum + (p.queue_size || 0), 0);
            const avgCpu = processorCount > 0 ? processors.reduce((sum, p) => sum + (p.cpu_usage || 0), 0) / processorCount : 0;
            const avgMemory = processorCount > 0 ? processors.reduce((sum, p) => sum + (p.memory_usage || 0), 0) / processorCount : 0;
            
            metricsHtml += `
                <h5>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h5>
                <div class="metrics-grid">
                    <div class="metric-card">
                        <strong>–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á</strong><br>
                        <span class="metric-value">${totalTasks}</span>
                    </div>
                    <div class="metric-card">
                        <strong>–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏</strong><br>
                        <span class="metric-value">${totalQueue}</span>
                    </div>
                    <div class="metric-card">
                        <strong>–°—Ä–µ–¥–Ω–∏–π CPU</strong><br>
                        <span class="metric-value">${avgCpu.toFixed(1)}%</span>
                    </div>
                    <div class="metric-card">
                        <strong>–°—Ä–µ–¥–Ω—è—è –ø–∞–º—è—Ç—å</strong><br>
                        <span class="metric-value">${avgMemory.toFixed(1)}%</span>
                    </div>
                </div>
            `;
        } else {
            metricsHtml += `
                <div class="json-viewer">${JSON.stringify(data, null, 2)}</div>
            `;
        }
        
        document.getElementById('workStealResults').innerHTML = metricsHtml;
        document.getElementById('workStealResults').style.display = 'block';
        
        log('‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã', 'success');
        
    } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: ${error.message}`, 'error');
    }
}

async function loadMetrics() {
    try {
        const baseUrl = document.getElementById('baseUrl').value;
        const apiKey = document.getElementById('apiKey').value;
        
        log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã...');

        const response = await fetch(`${baseUrl}/api/internal/metrics`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${apiKey}`
            }
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        displayMetrics(data);
        log('‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'success');
        
    } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫: ${error.message}`, 'error');
    }
}

function displayMetrics(data) {
    const container = document.getElementById('metricsContainer');
    const statsContainer = document.getElementById('realtimeStats');
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    container.innerHTML = `
        <div class="json-viewer">${JSON.stringify(data, null, 2)}</div>
    `;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    if (data.processors) {
        const totalProcessors = Object.keys(data.processors).length;
        const activeProcessors = Object.values(data.processors).filter(p => p.status === 'active').length;
        const totalTasks = Object.values(data.processors).reduce((sum, p) => sum + (p.current_tasks || 0), 0);
        
        statsContainer.innerHTML = `
            <div class="metric-card">
                <div class="metric-value">${totalProcessors}</div>
                <div class="metric-label">–í—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">${activeProcessors}</div>
                <div class="metric-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">${totalTasks}</div>
                <div class="metric-label">–ó–∞–¥–∞—á –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">${new Date().toLocaleTimeString()}</div>
                <div class="metric-label">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</div>
            </div>
        `;
    }
}

function startMetricsPolling() {
    document.getElementById('metricsPollingBtn').disabled = true;
    document.getElementById('stopMetricsBtn').disabled = false;
    log('üìä –ù–∞—á–∞—Ç–æ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥');
    
    metricsInterval = setInterval(loadMetrics, 10000);
    loadMetrics(); // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ä–∞–∑—É
}

function stopMetricsPolling() {
    if (metricsInterval) {
        clearInterval(metricsInterval);
        metricsInterval = null;
        document.getElementById('metricsPollingBtn').disabled = false;
        document.getElementById('stopMetricsBtn').disabled = true;
        log('‚èπÔ∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }
}

function exportLogs() {
    const logs = document.getElementById('logs').innerText;
    const blob = new Blob([logs], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `llm-proxy-logs-${new Date().toISOString().slice(0,19).replace(/:/g,'-')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    log('üíæ –õ–æ–≥–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
}

function startMagicSSEPolling(resultToken, magicInput, wrapper, restoreMagicInterface) {
    try {
        const baseUrl = document.getElementById('baseUrl').value;
        if (!baseUrl) {
            restoreMagicInterface('‚ùå Base URL –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        log('‚ö° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–∞–≥–∏—á–µ—Å–∫–æ–º—É real-time –ø–æ–ª–ª–∏–Ω–≥—É...');
        const sseUrl = baseUrl + '/api/result-polling?token=' + encodeURIComponent(resultToken);
        let magicTaskFinalized = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        
        function connectMagicSSE() {
            // –ù–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            if (magicTaskFinalized) {
                log('‚ÑπÔ∏è –ú–∞–≥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
                return;
            }
            
            if (magicSSEReconnectCount >= 5) {
                log('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ SSE (5)', 'error');
                restoreMagicInterface('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è');
                return;
            }
            
            if (magicSSEReconnectCount > 0) {
                log('üîÑ –ú–∞–≥–∏—á–µ—Å–∫–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è #' + (magicSSEReconnectCount + 1));
            }
            
            magicSSEConnection = new EventSource(sseUrl);

            magicSSEConnection.onopen = function(event) {
                log('‚ú® –ú–∞–≥–∏—á–µ—Å–∫–æ–µ real-time —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                magicSSEReconnectCount = 0; // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            };

        magicSSEConnection.onmessage = function(event) {
            try {
                log('üîÆ –ü–æ–ª—É—á–µ–Ω–æ –º–∞–≥–∏—á–µ—Å–∫–æ–µ SSE —Å–æ–±—ã—Ç–∏–µ: ' + event.data);
                const data = JSON.parse(event.data);
                log('üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω, —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: ' + data.type);
                log('üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: ' + JSON.stringify(data.data, null, 2));
                
                switch(data.type) {
                    case 'heartbeat':
                        if (data.data.message) {
                            log('üíì ' + data.data.message);
                        } else {
                            log('üíì –ú–∞–≥–∏—á–µ—Å–∫–æ–µ —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ');
                        }
                        break;
                        
                    case 'task_status':
                        log('üìä –ú–∞–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å: ' + data.data.status);
                        if (data.data.processingStartedAt) {
                            log('‚è∞ –ú–∞–≥–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å: ' + new Date(data.data.processingStartedAt).toLocaleString());
                        }
                        break;
                        
                    case 'task_completed':
                        log('üéâ –ú–∞–≥–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!', 'success');
                        log('üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏: ' + JSON.stringify(data.data, null, 2));
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏–Ω–ø—É—Ç–µ
                        if (data.data.result) {
                            log('‚ú® –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ' + data.data.result.substring(0, 100) + '...');
                            magicInput.value = data.data.result.trim();
                            // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–ø—É—Ç –≤ —Ñ–æ—Ä–º–µ
                            const productDataInput = document.getElementById('productData');
                            if (productDataInput) {
                                productDataInput.value = data.data.result.trim();
                                log('‚ú® –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–ø—É—Ç —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω');
                            }
                        } else {
                            log('‚ö†Ô∏è –ú–∞–≥–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!', 'warning');
                        }
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —É—Å–ø–µ—Ö–∞
                        wrapper.style.background = 'rgba(40, 167, 69, 0.2)';
                        setTimeout(() => {
                            wrapper.style.background = 'rgba(255, 255, 255, 0.95)';
                        }, 2000);
                        
                        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                        magicTaskFinalized = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
                        magicSSEConnection.close();
                        magicSSEConnection = null;
                        if (magicSSEReconnectTimeout) {
                            clearTimeout(magicSSEReconnectTimeout);
                            magicSSEReconnectTimeout = null;
                        }
                        magicSSEReconnectCount = 0;
                        restoreMagicInterface();
                        break;
                        
                    case 'task_failed':
                        log('‚ùå –ú–∞–≥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: ' + (data.data.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
                        magicTaskFinalized = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
                        magicSSEConnection.close();
                        magicSSEConnection = null;
                        if (magicSSEReconnectTimeout) {
                            clearTimeout(magicSSEReconnectTimeout);
                            magicSSEReconnectTimeout = null;
                        }
                        magicSSEReconnectCount = 0;
                        restoreMagicInterface('‚ùå –ú–∞–≥–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞');
                        break;
                        
                    case 'error':
                        log('‚ùå –û—à–∏–±–∫–∞ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ SSE: ' + data.data.error, 'error');
                        if (data.data.shouldReconnect) {
                            const delay = data.data.reconnectDelay || 5000;
                            log('üîÑ –ú–∞–≥–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ' + (delay/1000) + ' —Å–µ–∫—É–Ω–¥...');
                            magicSSEConnection.close();
                            magicSSEReconnectCount++;
                            magicSSEReconnectTimeout = setTimeout(connectMagicSSE, delay);
                        } else {
                            magicSSEConnection.close();
                            magicSSEConnection = null;
                            restoreMagicInterface('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
                        }
                        break;
                        
                    default:
                        log('üìù –ú–∞–≥–∏—á–µ—Å–∫–æ–µ SSE —Å–æ–±—ã—Ç–∏–µ: ' + data.type);
                }
            } catch (error) {
                log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–∞–≥–∏—á–µ—Å–∫–∏—Ö SSE –¥–∞–Ω–Ω—ã—Ö: ' + error.message, 'error');
            }
        };

        magicSSEConnection.onerror = function(event) {
            // –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            if (magicTaskFinalized) {
                log('‚ÑπÔ∏è –ú–∞–≥–∏—á–µ—Å–∫–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏');
                return;
            }
            
            log('‚ùå –û—à–∏–±–∫–∞ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...', 'error');
            if (magicSSEConnection) {
                magicSSEConnection.close();
                magicSSEReconnectCount++;
                magicSSEReconnectTimeout = setTimeout(connectMagicSSE, 5000);
            }
        };
        }

        // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        magicSSEReconnectCount = 0;
        connectMagicSSE();

        // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ SSE –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç
        setTimeout(() => {
            if (magicSSEConnection && magicSSEConnection.readyState === EventSource.CONNECTING) {
                log('‚ùå –¢–∞–π–º–∞—É—Ç –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
                magicSSEConnection.close();
                magicSSEConnection = null;
                restoreMagicInterface('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–∞–≥–∏–∏');
            }
        }, 150000); // 2.5 –º–∏–Ω—É—Ç—ã
        
    } catch (error) {
        log('‚ùå –û—à–∏–±–∫–∞ –≤ –º–∞–≥–∏—á–µ—Å–∫–æ–º Real-time –ø–æ–ª–ª–∏–Ω–≥–µ: ' + error.message, 'error');
        restoreMagicInterface('‚ùå ' + error.message);
    }
}

// === SSE POLLING DEMO FUNCTIONS ===
function startSSEPollingDemo() {
    const prompt = document.getElementById('ssePollingPrompt').value.trim();
    if (!prompt) {
        showSSEPollingStatus('error', '‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏');
        return;
    }

    const model = document.getElementById('ssePollingModel').value;
    const btn = document.getElementById('ssePollingBtn');
    const stopBtn = document.getElementById('stopSSEPollingBtn');
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    ssePollingTaskCompleted = false;
    
    btn.disabled = true;
    stopBtn.disabled = false;
    document.getElementById('ssePollingPrompt').disabled = true;

    showSSEPollingStatus('info', 'ÔøΩ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞...');
    
    // –°–Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
    fetch('/api/internal/generate-token', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + document.getElementById('apiKey').value
        },
        body: JSON.stringify({
            user_id: 'sse-demo-user',
            product_data: prompt
        })
    })
    .then(response => response.json())
    .then(tokenData => {
        if (!tokenData.success || !tokenData.token) {
            throw new Error(tokenData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å JWT —Ç–æ–∫–µ–Ω');
        }
        
        showSSEPollingStatus('success', '‚úÖ JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω');
        showSSEPollingStatus('info', 'ÔøΩüöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...');
        
        // –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É
        return fetch('/api/create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + tokenData.token
            },
            body: JSON.stringify({})
        });
    })
    .then(response => response.json())
    .then(data => {
        if (data.taskId && data.token) {
            ssePollingTaskId = data.taskId;
            showSSEPollingStatus('success', `‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: ${data.taskId}`);
            startSSEResultPolling(data.taskId, data.token);
        } else {
            throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
        }
    })
    .catch(error => {
        showSSEPollingStatus('error', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        resetSSEPollingUI();
    });
}

function startSSEResultPolling(taskId, token) {
    showSSEPollingStatus('info', `üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ SSE –∫ /api/result-polling?taskId=${taskId}&token=***...`);

    const sseUrl = `/api/result-polling?taskId=${taskId}&token=${encodeURIComponent(token)}`;
    ssePollingConnection = new EventSource(sseUrl);
    
    ssePollingConnection.onopen = function() {
        showSSEPollingStatus('success', 'üì° SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    };
    
    ssePollingConnection.onmessage = function(event) {
        try {
            const data = JSON.parse(event.data);
            const timestamp = new Date().toLocaleTimeString();
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
            switch(data.type) {
                case 'heartbeat':
                    showSSEPollingStatus('info', `[${timestamp}] üíì Heartbeat`);
                    break;
                    
                case 'task_status':
                    showSSEPollingStatus('info', `[${timestamp}] üìä –°—Ç–∞—Ç—É—Å: ${data.data.status}`);
                    
                    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π - –≥–æ—Ç–æ–≤–∏–º—Å—è –∫ –∑–∞–∫—Ä—ã—Ç–∏—é
                    if (data.data.status === 'completed' || data.data.status === 'failed' || data.data.status === 'error') {
                        showSSEPollingStatus('success', `üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${data.data.status}`);
                    }
                    break;
                    
                case 'task_completed':
                    ssePollingTaskCompleted = true;
                    showSSEPollingStatus('success', `‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
                    if (data.data.result) {
                        showSSEPollingResult(data.data.result);
                    }
                    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è
                    break;
                    
                case 'task_failed':
                    ssePollingTaskCompleted = true;
                    showSSEPollingStatus('error', `‚ùå –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: ${data.data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
                    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è
                    break;
                    
                case 'error':
                    ssePollingTaskCompleted = true;
                    showSSEPollingStatus('error', `‚ùå –û—à–∏–±–∫–∞ SSE: ${data.data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
                    break;
                    
                default:
                    showSSEPollingStatus('info', `[${timestamp}] üìù –°–æ–±—ã—Ç–∏–µ ${data.type}`);
            }
            
        } catch (error) {
            showSSEPollingStatus('warning', `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ SSE –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
        }
    };
    
    ssePollingConnection.onerror = function() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        if (!ssePollingTaskCompleted) {
            showSSEPollingStatus('error', '‚ùå –û—à–∏–±–∫–∞ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
            resetSSEPollingUI();
        }
    };
    
    ssePollingConnection.onclose = function() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        if (!ssePollingTaskCompleted) {
            showSSEPollingStatus('info', 'üîí SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —Å–µ—Ä–≤–µ—Ä–æ–º');
        } else {
            showSSEPollingStatus('success', 'üîí SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏');
        }
        resetSSEPollingUI();
    };
}

function stopSSEPollingDemo() {
    if (ssePollingConnection) {
        ssePollingTaskCompleted = true; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
        ssePollingConnection.close();
        ssePollingConnection = null;
        showSSEPollingStatus('info', '‚èπÔ∏è SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    }
    resetSSEPollingUI();
}

function resetSSEPollingUI() {
    document.getElementById('ssePollingBtn').disabled = false;
    document.getElementById('stopSSEPollingBtn').disabled = true;
    document.getElementById('ssePollingPrompt').disabled = false;
    ssePollingTaskId = null;
    ssePollingConnection = null;
}

function showSSEPollingStatus(type, message) {
    const statusDiv = document.getElementById('ssePollingStatus');
    const timestamp = new Date().toLocaleTimeString();
    const newStatus = `<div class="${type}">[${timestamp}] ${message}</div>`;
    statusDiv.innerHTML = newStatus + statusDiv.innerHTML.split('</div>').slice(0, 10).join('</div>');
}

function showSSEPollingResult(result) {
    const resultDiv = document.getElementById('ssePollingResult');
    resultDiv.innerHTML = `<div class="success"><strong>üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏:</strong><br><pre style="white-space: pre-wrap; word-wrap: break-word; margin-top: 10px; padding: 10px; background: #f8f9fa; border-radius: 4px;">${result}</pre></div>`;
}

function clearSSEPollingDemo() {
    // –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª—é–±–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (ssePollingConnection) {
        stopSSEPollingDemo();
    }
    
    document.getElementById('ssePollingStatus').innerHTML = '';
    document.getElementById('ssePollingResult').innerHTML = '';
    document.getElementById('ssePollingPrompt').value = '';
    ssePollingTaskCompleted = false;
}

function estimateTime() {
    const baseUrl = document.getElementById('baseUrl').value;
    const apiKey = document.getElementById('apiKey').value;
    const resultDiv = document.getElementById('estimateTimeResult');
    resultDiv.style.display = 'block';
    resultDiv.innerHTML = '‚è≥ –ó–∞–ø—Ä–æ—Å...';
    fetch(`${baseUrl}/api/internal/estimated-time`, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
        },
    })
    .then(r => r.json())
    .then(data => {
        if (data.success) {
            resultDiv.innerHTML = `<strong>–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏:</strong> ${data.estimated_time || data.estimatedTime || '???'}`;
        } else {
            resultDiv.innerHTML = `<span style='color:#e74c3c;'>–û—à–∏–±–∫–∞: ${data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É'}</span>`;
        }
    })
    .catch(e => {
        resultDiv.innerHTML = `<span style='color:#e74c3c;'>–û—à–∏–±–∫–∞: ${e.message}</span>`;
    });
}


// ===== Internal API Key Cookie Logic =====
function setCookie(name, value, days) {
    let expires = "";
    if (days) {
        const date = new Date();
        date.setTime(date.getTime() + (days*24*60*60*1000));
        expires = "; expires=" + date.toUTCString();
    }
    document.cookie = name + "=" + (value || "")  + expires + "; path=/";
}
function getCookie(name) {
    const nameEQ = name + "=";
    const ca = document.cookie.split(';');
    for(let i=0;i < ca.length;i++) {
        let c = ca[i];
        while (c.charAt(0)==' ') c = c.substring(1,c.length);
        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
    }
    return null;
}
function eraseCookie(name) {   
    document.cookie = name+'=; Max-Age=-99999999; path=/';  
}

function showLogin() {
    document.getElementById('login-modal').style.display = '';
    document.getElementById('main-content').style.display = 'none';
}
function showMain() {
    document.getElementById('login-modal').style.display = 'none';
    document.getElementById('main-content').style.display = '';
    document.getElementById('logoutBtn').style.display = '';
}
function loginWithApiKey() {
    const key = document.getElementById('loginApiKey').value.trim();
    if (!key) {
        document.getElementById('loginError').textContent = '–í–≤–µ–¥–∏—Ç–µ Internal API Key';
        return;
    }
    setCookie('internal_api_key', key, 30);
    document.getElementById('apiKey').value = key;
    document.getElementById('loginError').textContent = '';
    showMain();
}
function logoutApiKey() {
    eraseCookie('internal_api_key');
    showLogin();
    log('üîë –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'info');
}

// –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á –≤ cookie, –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –≤ #apiKey
window.addEventListener('DOMContentLoaded', function() {
    const savedKey = getCookie('internal_api_key');
    if (savedKey) {
        const apiKeyInput = document.getElementById('apiKey');
        if (apiKeyInput) {
            apiKeyInput.value = savedKey;
            showMain();
        } else {
            showLogin();
        }
    } else {
        showLogin();
    }
});
// –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ ‚Äî –æ—á–∏—â–∞—Ç—å –ø–æ–ª–µ –∏ cookie
window.logoutApiKey = function() {
    eraseCookie('internal_api_key');
    const apiKeyInput = document.getElementById('apiKey');
    if (apiKeyInput) apiKeyInput.value = '';
    // –°–∫—Ä—ã—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –ø–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
    if (document.getElementById('main-content')) document.getElementById('main-content').style.display = 'none';
    if (document.getElementById('login-modal')) document.getElementById('login-modal').style.display = '';
};

function displayPendingTasks(tasks) {
    const container = document.getElementById('pendingTasksList');
    const title = document.getElementById('pendingTasksTitle');
    title.textContent = `‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–¥–∞—á–∏ (${tasks.length})`;
    if (tasks.length === 0) {
        container.innerHTML = '<div style="padding: 20px; text-align: center; color: #666;">–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞—á</div>';
        return;
    }
    container.innerHTML = '';
    tasks.forEach(task => {
        const taskEl = document.createElement('div');
        taskEl.className = 'task-item';
        const createdAt = task.created_at ? new Date(task.created_at).toLocaleString() : 'Unknown';
        const waitingTime = task.created_at ? Math.floor((Date.now() - task.created_at) / 1000) : 0;
        const waitingTimeStr = waitingTime > 60 ? `${Math.floor(waitingTime / 60)}–º ${waitingTime % 60}—Å` : `${waitingTime}—Å`;
        taskEl.innerHTML = `
            <div style="flex: 1;">
                <div style="font-weight: bold; margin-bottom: 5px;">
                    ID: ${task.id}
                    <span class="status pending">‚è≥ ${task.status || 'pending'}</span>
                </div>
                <div style="font-size: 0.9em; color: #666; margin-bottom: 5px;">
                    User: ${task.user_id || 'Unknown'} | Created: ${createdAt}
                </div>
                <div style="font-size: 0.85em; color: #856404; margin-bottom: 5px; font-weight: 500;">
                    ‚è±Ô∏è –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${waitingTimeStr}
                </div>
                <div style="max-height: 80px; overflow-y: auto; background: #f8f9fa; padding: 8px; border-radius: 4px; font-family: monospace; font-size: 0.85em;">
                    Prompt: ${(() => {
                        try {
                            const params = JSON.parse(task.ollama_params || '{}');
                            return (params.prompt || 'Default prompt').substring(0, 150) + ((params.prompt || '').length > 150 ? '...' : '');
                        } catch {
                            return 'No prompt data';
                        }
                    })()}
                </div>
                ${(task.error_message && task.error_message.length > 0) ? `
                    <div style="margin-top: 8px; max-height: 80px; overflow-y: auto; background: #f8d7da; padding: 8px; border-radius: 4px; font-family: monospace; font-size: 0.85em; color: #721c24;">
                        <strong>–û—à–∏–±–∫–∞:</strong> ${task.error_message.substring(0, 200)}${task.error_message.length > 200 ? '...' : ''}
                    </div>
                ` : ''}
            </div>
        `;
        container.appendChild(taskEl);
    });
}

function displayAllTasks(tasks) {
    const container = document.getElementById('allTasksList');
    const title = document.getElementById('allTasksTitle');
    title.textContent = `üìÑ –í—Å–µ –∑–∞–¥–∞—á–∏ (${tasks.length})`;
    if (tasks.length === 0) {
        container.innerHTML = '<div style="padding: 20px; text-align: center; color: #666;">–ù–µ—Ç –∑–∞–¥–∞—á</div>';
        return;
    }
    container.innerHTML = '';
    tasks.forEach(task => {
        const taskEl = document.createElement('div');
        taskEl.className = 'task-item';
        const createdAt = task.created_at ? new Date(task.created_at).toLocaleString() : 'Unknown';
        const statusIcon = task.status === 'completed' ? '‚úÖ' : task.status === 'failed' ? '‚ùå' : task.status === 'pending' ? '‚è≥' : '‚ö†Ô∏è';
        let executionTimeStr = '';
        if (task.status === 'completed' || task.status === 'failed') {
            if (task.completed_at && task.created_at) {
                const totalTime = Math.floor((task.completed_at - task.created_at) / 1000);
                const totalTimeStr = totalTime > 60 ? `${Math.floor(totalTime / 60)}–º ${totalTime % 60}—Å` : `${totalTime}—Å`;
                if (task.processing_started_at) {
                    const processingTime = Math.floor((task.completed_at - task.processing_started_at) / 1000);
                    const processingTimeStr = processingTime > 60 ? `${Math.floor(processingTime / 60)}–º ${processingTime % 60}—Å` : `${processingTime}—Å`;
                    executionTimeStr = `${totalTimeStr} (–æ–±—Ä–∞–±–æ—Ç–∫–∞: ${processingTimeStr})`;
                } else {
                    executionTimeStr = totalTimeStr;
                }
            }
        } else if (task.status === 'processing' && task.processing_started_at) {
            const currentTime = Math.floor((Date.now() - task.processing_started_at) / 1000);
            executionTimeStr = currentTime > 60 ? `${Math.floor(currentTime / 60)}–º ${currentTime % 60}—Å` : `${currentTime}—Å`;
        } else if (task.status === 'pending') {
            const waitingTime = task.created_at ? Math.floor((Date.now() - task.created_at) / 1000) : 0;
            executionTimeStr = waitingTime > 60 ? `${Math.floor(waitingTime / 60)}–º ${waitingTime % 60}—Å` : `${waitingTime}—Å`;
        }
        taskEl.innerHTML = `
            <div style="flex: 1;">
                <div style="font-weight: bold; margin-bottom: 5px;">
                    <span class="status ${task.status || 'unknown'}">${statusIcon}</span>
                    ID: ${task.id}
                </div>
                <div style="font-size: 0.9em; color: #666; margin-bottom: 5px;">
                    User: ${task.user_id || 'Unknown'} | Created: ${createdAt}
                </div>
                ${executionTimeStr ? `
                    <div style="font-size: 0.85em; color: ${task.status === 'completed' ? '#155724' : task.status === 'failed' ? '#721c24' : task.status === 'processing' ? '#004085' : '#856404'}; margin-bottom: 5px; font-weight: 500;">
                        ‚è±Ô∏è ${task.status === 'completed' ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞:' : task.status === 'failed' ? '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞:' : task.status === 'processing' ? '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è:' : '–í –æ–∂–∏–¥–∞–Ω–∏–∏:'} ${executionTimeStr}
                    </div>
                ` : ''}
                <div style="max-height: 80px; overflow-y: auto; background: #f8f9fa; padding: 8px; border-radius: 4px; font-family: monospace; font-size: 0.85em;">
                    Prompt: ${(() => {
                        try {
                            const params = JSON.parse(task.ollama_params || '{}');
                            return (params.prompt || 'Default prompt').substring(0, 150) + ((params.prompt || '').length > 150 ? '...' : '');
                        } catch {
                            return 'No prompt data';
                        }
                    })()}
                </div>
                <div style="max-height: 80px; overflow-y: auto; background: #f8f9fa; padding: 8px; border-radius: 4px; font-family: monospace; font-size: 0.85em;">
                    Data: ${(task.product_data || 'No data').substring(0, 150)}${(task.product_data || '').length > 150 ? '...' : ''}
                </div>
                ${(task.result && task.result.length > 0) ? `
                    <div style="margin-top: 8px; max-height: 80px; overflow-y: auto; background: #e7f3ff; padding: 8px; border-radius: 4px; font-family: monospace; font-size: 0.85em;">
                        <strong>Result:</strong> ${task.result.substring(0, 150)}${task.result.length > 150 ? '...' : ''}
                    </div>
                ` : ''}
                ${(task.error_message && task.error_message.length > 0) ? `
                    <div style="margin-top: 8px; max-height: 80px; overflow-y: auto; background: #f8d7da; padding: 8px; border-radius: 4px; font-family: monospace; font-size: 0.85em; color: #721c24;">
                        <strong>–û—à–∏–±–∫–∞:</strong> ${task.error_message.substring(0, 200)}${task.error_message.length > 200 ? '...' : ''}
                    </div>
                ` : ''}
            </div>
        `;
        container.appendChild(taskEl);
    });
}

