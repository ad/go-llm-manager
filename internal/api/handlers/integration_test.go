package handlers

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
	"time"

	"github.com/ad/go-llm-manager/internal/auth"
	"github.com/ad/go-llm-manager/internal/config"
	"github.com/ad/go-llm-manager/internal/database"
)

// TestFullTaskLifecycleWithVoting —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª:
// —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ‚Üí –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ‚Üí –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
func TestFullTaskLifecycleWithVoting(t *testing.T) {
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	db := database.NewTestDB(t)

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ rating –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
	_, err := db.Exec("ALTER TABLE tasks ADD COLUMN rating TEXT CHECK (rating IN ('upvote', 'downvote', NULL))")
	if err != nil && !strings.Contains(err.Error(), "duplicate column") {
		t.Fatalf("Failed to add rating column: %v", err)
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	cfg := &config.Config{
		Auth: config.AuthConfig{
			JWTSecret:      "test-secret-key-for-integration-tests",
			InternalAPIKey: "test-internal-key",
		},
	}
	jwtAuth := auth.NewJWTAuth(cfg.Auth.JWTSecret)

	// –°–æ–∑–¥–∞–µ–º handlers
	publicHandlers := NewPublicHandlers(db, jwtAuth, cfg)
	internalHandlers := NewInternalHandlers(db, jwtAuth)

	// Test –¥–∞–Ω–Ω—ã–µ
	userID := "test-user-integration"
	productData := "iPhone 15 Pro 256GB –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"

	t.Run("full_lifecycle_with_voting", func(t *testing.T) {
		// 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
		t.Log("Step 1: Generating JWT token...")

		tokenReq := map[string]interface{}{
			"user_id":      userID,
			"product_data": productData,
		}
		tokenReqBody, _ := json.Marshal(tokenReq)

		req := httptest.NewRequest(http.MethodPost, "/api/internal/generate-token", bytes.NewReader(tokenReqBody))
		req.Header.Set("Content-Type", "application/json")
		req.Header.Set("Authorization", "Bearer test-internal-key")
		rr := httptest.NewRecorder()

		internalHandlers.GenerateToken(rr, req)

		if rr.Code != http.StatusOK {
			t.Fatalf("Expected status 200, got %d. Body: %s", rr.Code, rr.Body.String())
		}

		var tokenResp struct {
			Success bool   `json:"success"`
			Token   string `json:"token"`
		}
		if err := json.NewDecoder(rr.Body).Decode(&tokenResp); err != nil {
			t.Fatalf("Failed to decode token response: %v", err)
		}

		if !tokenResp.Success || tokenResp.Token == "" {
			t.Fatalf("Failed to get valid token: %+v", tokenResp)
		}
		t.Logf("‚úÖ JWT token generated successfully")

		// 2. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
		t.Log("Step 2: Creating task...")

		req = httptest.NewRequest(http.MethodPost, "/api/create", nil)
		req.Header.Set("Authorization", "Bearer "+tokenResp.Token)
		rr = httptest.NewRecorder()

		publicHandlers.CreateTask(rr, req)

		if rr.Code != http.StatusCreated {
			t.Fatalf("Expected status 201, got %d. Body: %s", rr.Code, rr.Body.String())
		}

		var createResp struct {
			Success bool   `json:"success"`
			TaskID  string `json:"taskId"`
			Token   string `json:"token"`
		}
		if err := json.NewDecoder(rr.Body).Decode(&createResp); err != nil {
			t.Fatalf("Failed to decode create response: %v", err)
		}

		if !createResp.Success || createResp.TaskID == "" {
			t.Fatalf("Failed to create task: %+v", createResp)
		}
		t.Logf("‚úÖ Task created successfully with ID: %s", createResp.TaskID)

		// 3. –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–æ–±—ã—á–Ω–æ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä)
		t.Log("Step 3: Completing task...")

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Å—Ç–∞—Ç—É—Å "completed" —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
		result := "–û—Ç–ª–∏—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞!"
		err = db.UpdateTaskStatus(createResp.TaskID, "completed", &result, nil)
		if err != nil {
			t.Fatalf("Failed to complete task: %v", err)
		}
		t.Logf("‚úÖ Task completed successfully")

		// 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏
		t.Log("Step 4: Checking task result...")

		req = httptest.NewRequest(http.MethodPost, "/api/result", nil)
		req.Header.Set("Authorization", "Bearer "+createResp.Token)
		rr = httptest.NewRecorder()

		publicHandlers.GetResult(rr, req)

		if rr.Code != http.StatusOK {
			t.Fatalf("Expected status 200, got %d. Body: %s", rr.Code, rr.Body.String())
		}

		var resultResp struct {
			Success    bool    `json:"success"`
			Status     string  `json:"status"`
			Result     string  `json:"result"`
			UserRating *string `json:"rating"`
		}
		if err := json.NewDecoder(rr.Body).Decode(&resultResp); err != nil {
			t.Fatalf("Failed to decode result response: %v", err)
		}

		if !resultResp.Success || resultResp.Status != "completed" {
			t.Fatalf("Expected completed task, got: %+v", resultResp)
		}

		if resultResp.UserRating != nil {
			t.Fatalf("Expected no user rating initially, got: %v", *resultResp.UserRating)
		}
		t.Logf("‚úÖ Task result verified, no rating yet")

		// 5. –ì–æ–ª–æ—Å—É–µ–º "upvote" –∑–∞ –∑–∞–¥–∞—á—É
		t.Log("Step 5: Voting upvote...")

		voteReq := map[string]string{
			"vote_type": "upvote",
		}
		voteReqBody, _ := json.Marshal(voteReq)

		req = httptest.NewRequest(http.MethodPost, fmt.Sprintf("/api/tasks/%s/vote", createResp.TaskID), bytes.NewReader(voteReqBody))
		req.Header.Set("Content-Type", "application/json")
		req.Header.Set("Authorization", "Bearer "+tokenResp.Token) // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π JWT —Ç–æ–∫–µ–Ω
		rr = httptest.NewRecorder()

		publicHandlers.VoteTask(rr, req)

		if rr.Code != http.StatusOK {
			t.Fatalf("Expected status 200, got %d. Body: %s", rr.Code, rr.Body.String())
		}

		var voteResp database.VoteResponse
		if err := json.NewDecoder(rr.Body).Decode(&voteResp); err != nil {
			t.Fatalf("Failed to decode vote response: %v", err)
		}

		if !voteResp.Success {
			t.Fatalf("Vote was not successful: %+v", voteResp)
		}

		if voteResp.UserRating == nil || *voteResp.UserRating != "upvote" {
			t.Fatalf("Expected upvote rating, got: %v", voteResp.UserRating)
		}
		t.Logf("‚úÖ Upvote successful")

		// 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–π—Ç–∏–Ω–≥ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
		t.Log("Step 6: Verifying rating persistence...")

		task, err := db.GetTask(createResp.TaskID)
		if err != nil {
			t.Fatalf("Failed to get task after voting: %v", err)
		}

		if task.UserRating == nil || *task.UserRating != "upvote" {
			t.Fatalf("Expected task to have upvote rating, got: %v", task.UserRating)
		}
		t.Logf("‚úÖ Rating persisted in database")

		// 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
		t.Log("Step 7: Checking result with rating...")

		req = httptest.NewRequest(http.MethodPost, "/api/result", nil)
		req.Header.Set("Authorization", "Bearer "+createResp.Token)
		rr = httptest.NewRecorder()

		publicHandlers.GetResult(rr, req)

		if rr.Code != http.StatusOK {
			t.Fatalf("Expected status 200, got %d. Body: %s", rr.Code, rr.Body.String())
		}

		if err := json.NewDecoder(rr.Body).Decode(&resultResp); err != nil {
			t.Fatalf("Failed to decode result response: %v", err)
		}

		if resultResp.UserRating == nil || *resultResp.UserRating != "upvote" {
			t.Fatalf("Expected result to include upvote rating, got: %v", resultResp.UserRating)
		}
		t.Logf("‚úÖ Result includes rating")

		// 8. –ò–∑–º–µ–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ "downvote"
		t.Log("Step 8: Changing rating to downvote...")

		voteReq["vote_type"] = "downvote"
		voteReqBody, _ = json.Marshal(voteReq)

		req = httptest.NewRequest(http.MethodPost, fmt.Sprintf("/api/tasks/%s/vote", createResp.TaskID), bytes.NewReader(voteReqBody))
		req.Header.Set("Content-Type", "application/json")
		req.Header.Set("Authorization", "Bearer "+tokenResp.Token)
		rr = httptest.NewRecorder()

		publicHandlers.VoteTask(rr, req)

		if rr.Code != http.StatusOK {
			t.Fatalf("Expected status 200, got %d. Body: %s", rr.Code, rr.Body.String())
		}

		if err := json.NewDecoder(rr.Body).Decode(&voteResp); err != nil {
			t.Fatalf("Failed to decode vote response: %v", err)
		}

		if voteResp.UserRating == nil || *voteResp.UserRating != "downvote" {
			t.Fatalf("Expected downvote rating, got: %v", voteResp.UserRating)
		}
		t.Logf("‚úÖ Rating changed to downvote")

		// 9. –£–±–∏—Ä–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ (toggle behavior)
		t.Log("Step 9: Removing rating (toggle)...")

		voteReq["vote_type"] = "downvote" // –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –¥–æ–ª–∂–Ω–æ —É–±—Ä–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
		voteReqBody, _ = json.Marshal(voteReq)

		req = httptest.NewRequest(http.MethodPost, fmt.Sprintf("/api/tasks/%s/vote", createResp.TaskID), bytes.NewReader(voteReqBody))
		req.Header.Set("Content-Type", "application/json")
		req.Header.Set("Authorization", "Bearer "+tokenResp.Token)
		rr = httptest.NewRecorder()

		publicHandlers.VoteTask(rr, req)

		if rr.Code != http.StatusOK {
			t.Fatalf("Expected status 200, got %d. Body: %s", rr.Code, rr.Body.String())
		}

		var toggleResp database.VoteResponse
		if err := json.NewDecoder(rr.Body).Decode(&toggleResp); err != nil {
			t.Fatalf("Failed to decode vote response: %v", err)
		}

		if toggleResp.UserRating != nil {
			t.Fatalf("Expected no rating after toggle, got: %v", *toggleResp.UserRating)
		}
		t.Logf("‚úÖ Rating removed successfully")

		// 10. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		t.Log("Step 10: Final verification...")

		task, err = db.GetTask(createResp.TaskID)
		if err != nil {
			t.Fatalf("Failed to get task for final check: %v", err)
		}

		if task.UserRating != nil {
			t.Fatalf("Expected no rating in final state, got: %v", *task.UserRating)
		}
		t.Logf("‚úÖ Final state verified - no rating")

		t.Log("üéâ Full integration test completed successfully!")
	})
}

// TestRatingStatsIntegration —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
func TestRatingStatsIntegration(t *testing.T) {
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	db := database.NewTestDB(t)

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ rating –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
	_, err := db.Exec("ALTER TABLE tasks ADD COLUMN rating TEXT CHECK (rating IN ('upvote', 'downvote', NULL))")
	if err != nil && !strings.Contains(err.Error(), "duplicate column") {
		t.Fatalf("Failed to add rating column: %v", err)
	}

	cfg := &config.Config{
		Auth: config.AuthConfig{
			JWTSecret:      "test-secret-key-for-stats",
			InternalAPIKey: "test-internal-key",
		},
	}
	jwtAuth := auth.NewJWTAuth(cfg.Auth.JWTSecret)

	internalHandlers := NewInternalHandlers(db, jwtAuth)

	t.Run("rating_stats_integration", func(t *testing.T) {
		// –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
		userIDs := []string{"user1", "user2", "user3"}
		taskIDs := make([]string, 0, len(userIDs))

		for i, userID := range userIDs {
			// –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
			result := fmt.Sprintf("Result %d", i+1)
			task := &database.Task{
				ID:          fmt.Sprintf("task-%d", i+1),
				UserID:      userID,
				ProductData: fmt.Sprintf("Product %d", i+1),
				Status:      "completed",
				Result:      &result,
				CreatedAt:   time.Now().UnixMilli(),
			}
			completedAt := time.Now().UnixMilli()
			task.CompletedAt = &completedAt

			err := db.CreateTask(task)
			if err != nil {
				t.Fatalf("Failed to create task %d: %v", i+1, err)
			}
			taskIDs = append(taskIDs, task.ID)
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏: upvote, downvote, no rating
		ratings := []*string{
			func() *string { s := "upvote"; return &s }(),
			func() *string { s := "downvote"; return &s }(),
			nil, // no rating
		}

		for i, rating := range ratings {
			if rating != nil {
				err := db.UpdateTaskRating(taskIDs[i], userIDs[i], rating)
				if err != nil {
					t.Fatalf("Failed to set rating for task %d: %v", i+1, err)
				}
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
		t.Log("Checking rating stats...")

		req := httptest.NewRequest(http.MethodGet, "/api/internal/rating-stats", nil)
		req.Header.Set("Authorization", "Bearer test-internal-key")
		rr := httptest.NewRecorder()

		internalHandlers.GetRatingStats(rr, req)

		if rr.Code != http.StatusOK {
			t.Fatalf("Expected status 200, got %d. Body: %s", rr.Code, rr.Body.String())
		}

		var statsResp struct {
			Success    bool `json:"success"`
			Upvotes    int  `json:"upvotes"`
			Downvotes  int  `json:"downvotes"`
			TotalRated int  `json:"total_rated"`
		}

		if err := json.NewDecoder(rr.Body).Decode(&statsResp); err != nil {
			t.Fatalf("Failed to decode stats response: %v", err)
		}

		if !statsResp.Success {
			t.Fatalf("Stats request was not successful")
		}

		if statsResp.Upvotes != 1 {
			t.Errorf("Expected 1 upvote, got %d", statsResp.Upvotes)
		}

		if statsResp.Downvotes != 1 {
			t.Errorf("Expected 1 downvote, got %d", statsResp.Downvotes)
		}

		if statsResp.TotalRated != 2 {
			t.Errorf("Expected 2 total rated tasks, got %d", statsResp.TotalRated)
		}

		t.Log("‚úÖ Rating stats integration test completed successfully!")
	})
}

// TestVotingEdgeCases —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
func TestVotingEdgeCases(t *testing.T) {
	db := database.NewTestDB(t)

	_, err := db.Exec("ALTER TABLE tasks ADD COLUMN rating TEXT CHECK (rating IN ('upvote', 'downvote', NULL))")
	if err != nil && !strings.Contains(err.Error(), "duplicate column") {
		t.Fatalf("Failed to add rating column: %v", err)
	}

	cfg := &config.Config{
		Auth: config.AuthConfig{
			JWTSecret:      "test-secret-key-for-edge-cases",
			InternalAPIKey: "test-internal-key",
		},
	}
	jwtAuth := auth.NewJWTAuth(cfg.Auth.JWTSecret)
	publicHandlers := NewPublicHandlers(db, jwtAuth, cfg)

	t.Run("cannot_vote_on_pending_task", func(t *testing.T) {
		userID := "edge-case-user"
		taskID := "pending-task"

		// –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Å—Ç–∞—Ç—É—Å–µ pending
		task := &database.Task{
			ID:          taskID,
			UserID:      userID,
			ProductData: "Pending task product",
			Status:      "pending",
			CreatedAt:   time.Now().UnixMilli(),
		}

		err := db.CreateTask(task)
		if err != nil {
			t.Fatalf("Failed to create pending task: %v", err)
		}

		// –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
		payload := &database.JWTPayload{
			UserID:      userID,
			TaskID:      taskID,
			ProductData: "test-product",
		}

		token, err := jwtAuth.GenerateToken(payload, 3600)
		if err != nil {
			t.Fatalf("Failed to generate token: %v", err)
		}

		// –ü—ã—Ç–∞–µ–º—Å—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ pending –∑–∞–¥–∞—á—É
		voteReq := map[string]string{"vote_type": "upvote"}
		voteReqBody, _ := json.Marshal(voteReq)

		req := httptest.NewRequest(http.MethodPost, fmt.Sprintf("/api/tasks/%s/vote", taskID), bytes.NewReader(voteReqBody))
		req.Header.Set("Content-Type", "application/json")
		req.Header.Set("Authorization", "Bearer "+token)
		rr := httptest.NewRecorder()

		publicHandlers.VoteTask(rr, req)

		if rr.Code != http.StatusBadRequest {
			t.Errorf("Expected status 400, got %d. Body: %s", rr.Code, rr.Body.String())
		}

		t.Log("‚úÖ Cannot vote on pending task - correct")
	})

	t.Run("cannot_vote_on_other_user_task", func(t *testing.T) {
		ownerID := "task-owner"
		voterID := "task-voter"
		taskID := "other-user-task"

		// –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		result := "Completed result"
		task := &database.Task{
			ID:          taskID,
			UserID:      ownerID,
			ProductData: "Other user task",
			Status:      "completed",
			Result:      &result,
			CreatedAt:   time.Now().UnixMilli(),
		}
		completedAt := time.Now().UnixMilli()
		task.CompletedAt = &completedAt

		err := db.CreateTask(task)
		if err != nil {
			t.Fatalf("Failed to create task: %v", err)
		}

		// –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		payload := &database.JWTPayload{
			UserID:      voterID,
			TaskID:      taskID,
			ProductData: "test-product",
		}

		token, err := jwtAuth.GenerateToken(payload, 3600)
		if err != nil {
			t.Fatalf("Failed to generate token: %v", err)
		}

		// –ü—ã—Ç–∞–µ–º—Å—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —á—É–∂—É—é –∑–∞–¥–∞—á—É
		voteReq := map[string]string{"vote_type": "upvote"}
		voteReqBody, _ := json.Marshal(voteReq)

		req := httptest.NewRequest(http.MethodPost, fmt.Sprintf("/api/tasks/%s/vote", taskID), bytes.NewReader(voteReqBody))
		req.Header.Set("Content-Type", "application/json")
		req.Header.Set("Authorization", "Bearer "+token)
		rr := httptest.NewRecorder()

		publicHandlers.VoteTask(rr, req)

		if rr.Code != http.StatusForbidden {
			t.Errorf("Expected status 403, got %d. Body: %s", rr.Code, rr.Body.String())
		}

		t.Log("‚úÖ Cannot vote on other user's task - correct")
	})

	t.Log("üéâ Edge cases integration test completed successfully!")
}
